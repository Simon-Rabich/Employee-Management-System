#name: CI
#
#on:
#  push:
#    branches:
#      - main
#  pull_request:
#    branches:
#      - main
#
#jobs:
#  test:
#    runs-on: ubuntu-latest
#
#    services:
#      postgres:
#        image: postgres:13
#        env:
#          POSTGRES_DB: your_database
#          POSTGRES_USER: simonravitz
#          POSTGRES_PASSWORD: your_password
#        ports:
#          - 5432:5432
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.9
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#      - name: Run tests
#        env:
#          DATABASE_URL: postgresql+psycopg2://simonravitz:your_password@localhost:5432/your_database
#        run: |
#          pytest
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: your_database
          POSTGRES_USER: simonravitz
          POSTGRES_PASSWORD: your_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Check out the repository
      - uses: actions/checkout@v2

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run Python tests
      - name: Run tests
        env:
          DATABASE_URL: postgresql+psycopg2://simonravitz:your_password@localhost:5432/your_database
        run: |
          pytest

      # Step 5: Package the Helm chart
      - name: Package Helm Chart
        run: |
          helm package ./helm-employee-management-system

      # Step 6: Upload Helm chart to Nexus
      - name: Upload to Nexus Repository
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          curl --upload-file ./employee-management-system-0.1.0.tgz \
            http://localhost:8081/repository/app-infra/ \
            --user $NEXUS_USERNAME:$NEXUS_PASSWORD

      # Step 7: Deploy Helm Chart to Kubernetes
      - name: Deploy to Kubernetes
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          helm repo update
          helm install employee-management-system app-infra/employee-management-system --version 0.1.0
